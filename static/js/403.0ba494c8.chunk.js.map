{"version":3,"file":"static/js/403.0ba494c8.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/CharSearchForm/CharSearchForm.js","components/pages/MainPage.js","components/services/MarvelService.js","components/hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img style ={{display:'block', width:'250px', height:'250px', objectFit:'contain', margin:'0 auto'}} src={img} alt='error'/>\n  )\n}\n\n\nexport default ErrorMessage;","import { useEffect, useState } from \"react\";\nimport useMarvelService from \"../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n    return() => {\n    clearInterval(timerId);\n    }\n  }, [])\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n  \n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n  \n}\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../services/MarvelService\";\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch(process) {\n    case 'waiting':\n      return <Spinner/>;\n      break;\n    case 'loading':\n      return newItemLoading ? <Component/> : <Spinner/>;\n      break;\n    case 'confirmed':\n      return <Component/>;\n      break;\n    case 'error':\n      return <ErrorMessage/>\n      break;\n    default:\n      throw new Error('Unexpected process state');\n  }\n}\n\nconst CharList = (props) => {\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const {loading, error, getAllCharacters, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, [])\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'));\n  }\n\n  \n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset(offset => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => item.classList.remove('char_item_selected'));\n    itemRefs.current[id].classList.add('char_item_selected');\n    itemRefs.current[id].focus();\n  }\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li \n            className=\"char__item\" \n            tabIndex={0} \n            ref={el => itemRefs.current[i] = el} \n            key={item.id} \n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}>\n            onKeyPress={(e) => {\n              if(e.key === ' ' || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i)\n              }\n            }}\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>\n          {items}\n        </TransitionGroup>\n      </ul>\n    )\n  }\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading)\n  }, [process])\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button className=\"button button__main button__long\"\n      disabled={newItemLoading}\n      style={{'display': charEnded ? 'none' : 'block'}}\n      onClick={() => onRequest(offset)}>\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n}\n\n  CharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n  }\n\n\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n  const [char, setChar] = useState(null);\n\n  const {getCharacter, clearError, process, setProcess} =  useMarvelService();\n\n  useEffect(() => {\n    updateChar()\n  }, [props.charId])\n\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'))\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n\n  return (\n    <div className=\"char__info\">\n      {setContent(process, View, char)}\n    </div>\n  );\n\n}\n\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki, comics} = data;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle}/>\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n       {description}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {\n          comics.map((item, i) => {\n            if (i > 9) return;\n            return (\n              <li key={i} className=\"char__comics-item\">\n                {item.name}\n              </li>\n            );\n          })\n        }\n\n      </ul>\n    </>\n  );\n}\n\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  }\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({error: true});\n  }\n\n\n\n  render() {\n    if(this.state.error) {\n      return <ErrorMessage/>\n    }\n    return this.props.children;\n  }\n}\n\n\n\nexport default ErrorBoundary;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport CharSearchForm from \"../CharSearchForm/CharSearchForm\";\n\nimport decoration from '../../resources/img/vision.png';\n\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta\n          name=\"description\"\n          content=\"Marvel information portal\"\n        />\n        <title>Marvel information portal</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n        <ErrorBoundary>\n          <CharInfo charId={selectedChar} />\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <CharSearchForm />\n        </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  )\n}\n\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\n\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\n  const _baseOffset = 210;\n\n\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n      return res.data.results.map(_transformCharacter);\n  }\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  }\n\n\n  const getCharacter = async (id) => {\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n      return _transformCharacter(res.data.results[0]);\n  }\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n        `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n\n  const _transformCharacter = (char) => {\n    return {\n        id: char.id,\n        name: char.name,\n        description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n        homepage: char.urls[0].url,\n        wiki: char.urls[1].url,\n        comics: char.comics.items\n    }\n  }\n\n  const _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n    process,\n    setProcess,\n\t\tgetAllCharacters,\n    getCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n}\n\nexport default useMarvelService;","import {useState, useCallback} from 'react';\n\n\nexport const useHttp = () => {\n\n  const [process, setProcess] = useState('waiting');\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n\n    setProcess('loading');\n\n    try {\n      const response = await fetch(url, {method, body, headers});\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      return data;\n    } catch(e) {\n\n      setProcess('error');\n      throw e;\n    }\n  }, []);\n\n  const clearError = useCallback(() => {\n    setProcess('loading');\n  }, []);\n\n  return {request, clearError, process, setProcess}\n};","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n  switch(process) {\n    case 'waiting':\n      return <Skeleton/>;\n    case 'loading':\n      return <Spinner/>;\n    case 'confirmed':\n      return <Component data={data}/>;\n    case 'error':\n      return <ErrorMessage/>\n    default:\n      throw new Error('Unexpected process state');\n  }\n}\n\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","loading","error","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","console","log","this","setState","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}