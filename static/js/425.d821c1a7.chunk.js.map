{"version":3,"file":"static/js/425.d821c1a7.chunk.js","mappings":"oOAQMA,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAOF,GACL,IAAK,UACH,OAAOG,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAEjB,IAAK,UACH,OAAOF,GAAiBC,EAAAA,EAAAA,KAACF,EAAS,KAAKE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAEjD,IAAK,YACH,OAAOD,EAAAA,EAAAA,KAACF,EAAS,IAEnB,IAAK,QACH,OAAOE,EAAAA,EAAAA,KAACE,EAAAA,EAAY,IAEtB,QACE,MAAM,IAAIC,MAAM,4BAEtB,EAmEF,EAjEmB,WAEf,IAAAC,GAAoCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAA4CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApDX,EAAcY,EAAA,GAAEC,EAAiBD,EAAA,GACxCE,GAA4BR,EAAAA,EAAAA,UAAS,GAAES,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAAhCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAsCZ,EAAAA,EAAAA,WAAS,GAAMa,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElCG,GAA4DC,EAAAA,EAAAA,KAArCC,GAATF,EAAPG,QAAcH,EAALI,MAAmBJ,EAAZE,cAAc1B,EAAOwB,EAAPxB,QAAS6B,EAAUL,EAAVK,YAE9CC,EAAAA,EAAAA,YAAU,WACNC,EAAUb,GAAQ,EACtB,GAAG,IAEH,IAAMa,EAAY,SAACb,EAAQc,GACbjB,GAAViB,GACAN,EAAaR,GACRe,KAAKC,GACLD,MAAK,kBAAMJ,EAAW,YAAY,GAC3C,EAEMK,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAEZxB,EAAc,GAAD0B,QAAAC,EAAAA,EAAAA,GAAK5B,IAAU4B,EAAAA,EAAAA,GAAKJ,KACjCpB,GAAkB,GAClBI,EAAUD,EAAS,GACnBK,EAAea,EACnB,EAsBA,OACII,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CACxB3C,EAAWC,GAAS,kBAtB7B,SAAsB2C,GAClB,IAAMC,EAAQD,EAAIE,KAAI,SAACC,EAAMC,GACzB,OACI5C,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,eAAcC,UACxBF,EAAAA,EAAAA,MAACQ,EAAAA,GAAI,CAACC,GAAE,WAAAX,OAAaQ,EAAKI,IAAKR,SAAA,EAC3BvC,EAAAA,EAAAA,KAAA,OAAKgD,IAAKL,EAAKM,UAAWC,IAAKP,EAAKQ,MAAOb,UAAU,sBACrDtC,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,oBAAmBC,SAAEI,EAAKQ,SACzCnD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,qBAAoBC,SAAEI,EAAKS,YAJhBR,EAQ1C,IAEA,OACI5C,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,eAAcC,SACvBE,GAGb,CAImCY,CAAY7C,EAAW,GAAET,IACpDC,EAAAA,EAAAA,KAAA,UACIsD,SAAUvD,EACVwD,MAAO,CAAC,QAAYpC,EAAc,OAAS,SAC3CmB,UAAU,mCACVkB,QAAS,kBAAM5B,EAAUb,EAAO,EAACwB,UACjCvC,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,QAAOC,SAAC,kBAIvC,E,oBCtEA,EAhBkB,WAChB,OACEF,EAAAA,EAAAA,MAAAoB,EAAAA,SAAA,CAAAlB,SAAA,EACEF,EAAAA,EAAAA,MAACqB,EAAAA,EAAM,CAAAnB,SAAA,EACLvC,EAAAA,EAAAA,KAAA,QACE2D,KAAK,cACLC,QAAQ,8BAEV5D,EAAAA,EAAAA,KAAA,SAAAuC,SAAO,oBAEXvC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAS,KACV7D,EAAAA,EAAAA,KAAC8D,EAAU,MAGf,C,iFCde,SAAS1B,EAAmBI,GACzC,OCJa,SAA4BA,GACzC,GAAIuB,MAAMC,QAAQxB,GAAM,OAAO,EAAAyB,EAAA,GAAiBzB,EAClD,CDES,CAAkBA,IELZ,SAA0B0B,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,EACtH,CFGmC,CAAgB1B,KAAQ,EAAA8B,EAAA,GAA2B9B,IGLvE,WACb,MAAM,IAAI+B,UAAU,uIACtB,CHG8F,EAC9F,C","sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport useMarvelService from '../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n      case 'waiting':\n        return <Spinner/>;\n        break;\n      case 'loading':\n        return newItemLoading ? <Component/> : <Spinner/>;\n        break;\n      case 'confirmed':\n        return <Component/>;\n        break;\n      case 'error':\n        return <ErrorMessage/>\n        break;\n      default:\n        throw new Error('Unexpected process state');\n    }\n  }\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage =() => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Page with list of comics\"\r\n        />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n    <AppBanner/>\r\n    <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["setContent","process","Component","newItemLoading","_jsx","Spinner","ErrorMessage","Error","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","getAllComics","loading","error","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","concat","_toConsumableArray","_jsxs","className","children","arr","items","map","item","i","Link","to","id","src","thumbnail","alt","title","price","renderItems","disabled","style","onClick","_Fragment","Helmet","name","content","AppBanner","ComicsList","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}